name: Add Protection and Deploy

on:
  workflow_dispatch:
    inputs:
      repo_name:
        description: 'Repository name (e.g., owner/repo)'
        required: true
      type:
        description: 'Type of protection (branch or tag)'
        required: true
        type: choice
        options:
          - Branch
          - Tag
      pattern:
        description: 'Branch or tag pattern to protect (e.g., v* or main)'
        required: true
      environment:
        description: 'Environment name for deployment'
        required: true

jobs:
  add_protection:
    runs-on: ubuntu-latest

    steps:
      - name: Set up job
        id: setup
        run: echo "Starting protection configuration"

      - name: Install jq
        run: sudo apt-get install jq -y

      - name: Add protection
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        run: |
          set -e  # Exit immediately if any command fails

          # Input variables
          REPO_NAME="${{ github.event.inputs.repo_name }}"
          PATTERN="${{ github.event.inputs.pattern }}"
          TYPE="${{ github.event.inputs.type }}"
          ENVIRONMENT="${{ github.event.inputs.environment }}"

          # Escape special characters in the pattern for safe JSON and regex handling
          ESCAPED_PATTERN=$(echo "$PATTERN" | sed -e 's/\\/\\\\/g' -e 's/"/\\"/g')
          REGEX_SAFE_PATTERN=$(echo "$ESCAPED_PATTERN" | sed 's/[^a-zA-Z0-9-]/\\&/g')

          # GitHub API URL
          API_URL="https://api.github.com/repos/${REPO_NAME}/environments/${ENVIRONMENT}/deployment-branch-policies"
          echo "üîç Inputs: Repository=${REPO_NAME}, Pattern=${PATTERN}, Type=${TYPE}, Environment=${ENVIRONMENT}"

          # Fetch existing policies
          echo "Fetching existing deployment branch/tag policies..."
          EXISTING_PATTERNS=$(curl -s \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            $API_URL)

          if [ -z "$EXISTING_PATTERNS" ]; then
            echo "‚ùå Failed to fetch existing policies. Response: $EXISTING_PATTERNS"
            exit 1
          fi

          # Check for existing pattern
          if [ "$TYPE" = "Branch" ]; then
            echo "Checking if branch pattern '${PATTERN}' already exists..."
            BRANCH_EXISTS=$(echo "$EXISTING_PATTERNS" | jq -r --arg pattern "$ESCAPED_PATTERN" \
              '.branch_policies[]? | select(.name | test("^" + $pattern + "$")) | .name' || echo "")

            if [ "$BRANCH_EXISTS" = "$PATTERN" ]; then
              echo "‚ö†Ô∏è Branch pattern '${PATTERN}' already exists in environment '${ENVIRONMENT}'."
              exit 0
            fi

          elif [ "$TYPE" = "Tag" ]; then
            echo "Checking if tag pattern '${PATTERN}' already exists..."
            TAG_EXISTS=$(echo "$EXISTING_PATTERNS" | jq -r --arg pattern "$ESCAPED_PATTERN" \
              '.tag_policies[]? | select(.name | test("^" + $pattern + "$")) | .name' || echo "")

            if [ "$TAG_EXISTS" = "$PATTERN" ]; then
              echo "‚ö†Ô∏è Tag pattern '${PATTERN}' already exists in environment '${ENVIRONMENT}'."
              exit 0
            fi

          else
            echo "‚ùå Invalid type specified: $TYPE. Use 'Branch' or 'Tag'."
            exit 1
          fi

          echo "üöÄ Adding protection for pattern: $PATTERN"
          RESPONSE=$(curl -s -w "%{http_code}" -o response.json \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            $API_URL \
            -d "{
                  \"name\": \"${ESCAPED_PATTERN}\"
                }")
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          if [ "$HTTP_CODE" -eq 200 ]; then
            echo "‚úÖ Successfully added protection for pattern: $PATTERN"
          elif [ "$HTTP_CODE" -eq 303 ]; then
            echo "‚ö†Ô∏è Protection for pattern '${PATTERN}' already exists in environment '${ENVIRONMENT}'."
            exit 0
          else
            echo "‚ùå Failed to add protection. HTTP Status: $HTTP_CODE"
            echo "Response body: $(cat response.json)"
            exit 1
          fi

      - name: Confirmation
        run: echo "üéâ Protection has been successfully configured for the repository."
