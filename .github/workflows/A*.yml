name: Add Protection and Deploy

on:
  workflow_dispatch:
    inputs:
      repo_name:
        description: 'Repository name (e.g., owner/repo)'
        required: true
      type:
        description: 'Type of protection (branch or tag)'
        required: true
        type: choice
        options:
          - Branch
          - Tag
      pattern:
        description: 'Pattern to protect (e.g., v* or main)'
        required: true
      environment:
        description: 'Environment name for deployment'
        required: true

jobs:
  add_protection:
    runs-on: ubuntu-latest

    steps:
      - name: Set up job
        id: setup
        run: echo "Starting protection configuration"

      - name: Install jq
        run: sudo apt-get install jq -y

      - name: Add branch or tag protection
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        run: |
          set -e  # Exit immediately if any command fails
          # Input variables
          REPO_NAME="${{ github.event.inputs.repo_name }}"
          PATTERN="${{ github.event.inputs.pattern }}"
          TYPE="${{ github.event.inputs.type }}"
          ENVIRONMENT="${{ github.event.inputs.environment }}"
          # Escape special characters in the pattern for safe JSON and regex handling
          ESCAPED_PATTERN=$(echo "$PATTERN" | sed -e 's/\\/\\\\/g' -e 's/"/\\"/g')
          # API URLs
          BRANCH_API_URL="https://api.github.com/repos/${REPO_NAME}/environments/${ENVIRONMENT}/deployment-branch-policies"
          TAGS_API_URL="https://api.github.com/repos/${REPO_NAME}/git/refs/tags"
          echo "üîç Inputs: Repository=${REPO_NAME}, Pattern=${PATTERN}, Type=${TYPE}, Environment=${ENVIRONMENT}"

          # Branch Protection
          if [ "$TYPE" = "Branch" ]; then
            echo "Fetching existing branch policies..."
            EXISTING_BRANCH_POLICIES=$(curl -s \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              $BRANCH_API_URL)
            if [ -z "$EXISTING_BRANCH_POLICIES" ]; then
              echo "‚ùå Failed to fetch existing branch policies."
              exit 1
            fi

            echo "Checking if branch pattern '${PATTERN}' already exists..."
            BRANCH_EXISTS=$(echo "$EXISTING_BRANCH_POLICIES" | jq -r '.branch_policies[]?.name' | grep -E "^${PATTERN}$" || echo "")
            if [ "$BRANCH_EXISTS" ]; then
              echo "‚ö†Ô∏è Branch pattern '${PATTERN}' already exists in environment '${ENVIRONMENT}'."
              exit 0
            fi

            echo "üöÄ Adding branch protection for pattern: $PATTERN"
            RESPONSE=$(curl -s -w "%{http_code}" -o response.json \
              -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              $BRANCH_API_URL \
              -d "{
                    \"name\": \"${ESCAPED_PATTERN}\"
                  }")
            HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
            if [ "$HTTP_CODE" -eq 201 ]; then
              echo "‚úÖ Successfully added branch protection for pattern: $PATTERN"
            elif [ "$HTTP_CODE" -eq 422 ]; then
              echo "‚ö†Ô∏è Branch protection for pattern '${PATTERN}' already exists."
              exit 0
            else
              echo "‚ùå Failed to add branch protection. HTTP Status: $HTTP_CODE"
              echo "Response body: $(cat response.json)"
              exit 1
            fi
          fi

          # Tag Protection
          if [ "$TYPE" = "Tag" ]; then
            echo "Fetching existing tags..."
            EXISTING_TAGS=$(curl -s \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              $TAGS_API_URL)
            if [ -z "$EXISTING_TAGS" ]; then
              echo "‚ùå Failed to fetch existing tags."
              exit 1
            fi

            echo "Checking if tag pattern '${PATTERN}' already exists..."
            TAG_EXISTS=$(echo "$EXISTING_TAGS" | jq -r '.[].ref' | grep -E "refs/tags/${PATTERN}" || echo "")
            if [ "$TAG_EXISTS" ]; then
              echo "‚ö†Ô∏è Tag pattern '${PATTERN}' already exists."
              exit 0
            fi

            echo "üöÄ Adding tag protection is not directly supported by GitHub APIs."
            echo "Please implement manual tag management or consider alternative workflows."
            exit 1
          fi
      - name: Confirmation
        run: echo "üéâ Protection configuration process completed successfully."
