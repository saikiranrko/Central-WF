name: Add Environment Branch Protection
on:
  workflow_dispatch:
    inputs:
      repo:
        description: "Repository name (owner/repo)"
        required: true
      environment:
        description: "Environment (e.g., prod, staging, dev)"
        required: true
      branch_pattern:
        description: "Branch pattern (e.g., main, release/*)"
        required: true
jobs:
  set-env-branch-protection:
    runs-on: ubuntu-latest
    steps:
      - name: Apply Environment Branch Protection
        env:
          AUTH_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          owner=$(echo "${{ github.event.inputs.repo }}" | cut -d'/' -f1)
          repo=$(echo "${{ github.event.inputs.repo }}" | cut -d'/' -f2)
          branch_pattern="${{ github.event.inputs.branch_pattern }}"
          environment="${{ github.event.inputs.environment }}"
          
          # Fetch repository ID
          echo "Fetching repository ID for $owner/$repo..."
          repo_id=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/$owner/$repo" | jq -r .node_id)
          
          if [ -z "$repo_id" ] || [ "$repo_id" = "null" ]; then
            echo "Error: Failed to fetch repository ID. Check repository name and token permissions."
            exit 1
          fi
          
          # Execute GraphQL mutation with environment protection
          echo "Applying environment-specific branch protection rules..."
          curl -s -X POST \
            -H "Authorization: Bearer $AUTH_TOKEN" \
            -H "Content-Type: application/json" \
            https://api.github.com/graphql \
            -d "{
              \"query\": \"mutation(\$repositoryId: ID!, \$pattern: String!) { createBranchProtectionRule(input: { repositoryId: \$repositoryId, pattern: \$pattern, requiresApprovingReviews: true, requiredApprovingReviewCount: 2, dismissesStaleReviews: true, requiresCodeOwnerReviews: true, isAdminEnforced: true, requiresStatusChecks: true, requiresStrictStatusChecks: true, restrictsPushes: true, requiresDeployments: true, requiredDeploymentEnvironments: [\\\"${environment}\\\"], allowsForcePushes: false, allowsDeletions: false }) { branchProtectionRule { id pattern } } }\",
              \"variables\": {
                \"repositoryId\": \"$repo_id\",
                \"pattern\": \"$branch_pattern\"
              }
            }" | jq '.'
          
          echo "Environment-specific branch protection rules applied for '$branch_pattern' in $owner/$repo for $environment environment."
