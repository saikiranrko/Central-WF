name: Add Tag Deployment Rule

on:
  workflow_dispatch:
    inputs:
      environment_name:
        description: 'Environment name to add the tag rule to'
        required: true
        type: string
      repository:
        description: 'Repository name (format: owner/repo)'
        required: true
        type: string
      tag_pattern:
        description: 'Tag pattern (e.g., "v*" for tags starting with v, "*" for all tags)'
        required: true
        type: string
        default: '*'

jobs:
  add-deployment-rule:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      deployments: write
    
    steps:
      - name: Get current environment settings
        id: get-env
        run: |
          # Get the environment settings
          curl -L \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/repos/${{ inputs.repository }}/environments/${{ inputs.environment_name }}"

      - name: Create or update deployment rules
        run: |
          # Prepare new rules JSON
          echo '{
            "custom_branch_policies": true,
            "custom_deployment_rules": [
              {
                "ref_name": "${{ inputs.tag_pattern }}",
                "ref_type": "tag",
                "environment_id": null
              }
            ]
          }' > rules.json
          
          echo "New deployment rules:"
          cat rules.json
          
          # Update deployment branch policies
          HTTP_STATUS=$(curl -L -X PUT \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            -H "Content-Type: application/json" \
            -o response.txt -w "%{http_code}" \
            "https://api.github.com/repos/${{ inputs.repository }}/environments/${{ inputs.environment_name }}/deployment-branch-policies" \
            -d @rules.json)
          
          echo "Response status: $HTTP_STATUS"
          echo "Response body:"
          cat response.txt
          
          if [ "$HTTP_STATUS" != "200" ]; then
            echo "::error::Failed to update deployment rules. Status code: $HTTP_STATUS"
            exit 1
          fi
          
          echo "Successfully updated deployment rules"
          
          # Cleanup
          rm -f rules.json response.txt
