name: Add Protection and Deploy

on:
  workflow_dispatch:
    inputs:
      repo_name:
        description: 'Repository name (e.g., owner/repo)'
        required: true
      type:
        description: 'Type of protection (branch or tag)'
        required: true
        type: choice
        options:
          - Branch
          - Tag
      pattern:
        description: 'Branch or tag pattern to protect (e.g., v* or main)'
        required: true
      environment:
        description: 'Environment name for deployment'
        required: true

jobs:
  add_protection:
    runs-on: ubuntu-latest

    steps:
      - name: Set up job
        id: setup
        run: echo "Starting protection configuration"

      - name: Install jq
        run: sudo apt-get install jq -y

      - name: Fetch existing policies and validate inputs
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        run: |
          set -e  # Exit immediately if any command fails

          # Input variables
          REPO_NAME="${{ github.event.inputs.repo_name }}"
          PATTERN="${{ github.event.inputs.pattern }}"
          TYPE="${{ github.event.inputs.type }}"
          ENVIRONMENT="${{ github.event.inputs.environment }}"

          # GitHub API URL
          API_URL="https://api.github.com/repos/${REPO_NAME}/environments/${ENVIRONMENT}/deployment-branch-policies"

          # Fetch existing policies and save to JSON file
          echo "Fetching existing deployment branch/tag policies..."
          curl -L \
            -X GET \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            $API_URL | jq '.' > policies.json

          # Display the fetched policies for debugging
          echo "Fetched policies:"
          cat policies.json

          # Validate input type and pattern
          if [ "$TYPE" = "Branch" ]; then
            echo "Checking branch policies..."
            BRANCH_EXISTS=$(jq -r --arg pattern "$PATTERN" '.branch_policies[] | select(.type == "branch" and .name == $pattern)' policies.json)
            if [ -n "$BRANCH_EXISTS" ]; then
              echo "Branch pattern '$PATTERN' already exists in environment '$ENVIRONMENT'."
              exit 0
            else
              echo "Adding branch pattern '$PATTERN'..."
              curl -L \
                -X POST \
                -H "Accept: application/vnd.github+json" \
                -H "Authorization: Bearer $GITHUB_TOKEN" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                $API_URL \
                -d "{\"name\":\"$PATTERN\"}"
            fi

          elif [ "$TYPE" = "Tag" ]; then
            echo "Checking tag policies..."
            TAG_EXISTS=$(jq -r --arg pattern "$PATTERN" '.branch_policies[] | select(.type == "tag" and .name == $pattern)' policies.json)
            if [ -n "$TAG_EXISTS" ]; then
              echo "Tag pattern '$PATTERN' already exists in environment '$ENVIRONMENT'."
              exit 0
            else
              echo "Adding tag pattern '$PATTERN'..."
              curl -L \
                -X POST \
                -H "Accept: application/vnd.github+json" \
                -H "Authorization: Bearer $GITHUB_TOKEN" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                $API_URL \
                -d "{\"name\":\"$PATTERN\"}"
            fi

          else
            echo "‚ùå Invalid type specified: $TYPE. Use 'Branch' or 'Tag'."
            exit 1
          fi

      - name: Confirmation
        run: echo "üéâ Protection has been successfully configured for the repository."
