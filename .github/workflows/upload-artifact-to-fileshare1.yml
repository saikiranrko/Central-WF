name: Upload Artifactory Artifact to Azure File Share

on:
  workflow_call:
    inputs:
      artifact_path:
        description: 'Path to the artifact in JFrog Artifactory (e.g., libs-release-local/com/example/app/1.0.0/app-1.0.0.zip)'
        required: true
        type: string
      azure_fileshare_name:
        description: 'Azure file share name (e.g., myshare, production)'
        required: true
        type: string
      azure_fileshare_path:
        description: 'Directory path inside file share (e.g., plugins/v1). Leave empty for root.'
        required: false
        type: string
        default: ''
      overwrite:
        description: 'Whether to overwrite existing files in file share (true/false)'
        required: false
        type: string
        default: 'true'
    secrets:
      AZURE_STORAGE_CONNECTION_STRING:
        description: 'Azure Storage Connection String (preferred for File Share)'
        required: false
      AZURE_STORAGE_ACCOUNT_NAME:
        description: 'Azure Storage Account Name (alternative auth method)'
        required: false
      AZURE_STORAGE_ACCOUNT_KEY:
        description: 'Azure Storage Account Key (alternative auth method)'
        required: false
      AZURE_FILESHARE_SAS_TOKEN_URL:
        description: 'Azure File Share SAS token URL (fallback auth method)'
        required: false
      ARTIFACTORY_USERNAME:
        description: 'JFrog Artifactory username'
        required: true
      ARTIFACTORY_PASSWORD:
        description: 'JFrog Artifactory password'
        required: true

env:
  ARTIFACTORY_URL: "https://unwisely-sweepable-vincent.ngrok-free.dev/artifactory"

jobs:
  upload-artifact-to-fileshare:
    runs-on: ubuntu-latest
    
    steps:
      - name: Download artifact from JFrog Artifactory
        id: download-artifact
        run: |
          echo "=========================================="
          echo "Step 1: Download Artifact from JFrog"
          echo "=========================================="
          echo "Downloading artifact: ${{ inputs.artifact_path }}"
          
          ARTIFACT_FILE=$(basename "${{ inputs.artifact_path }}")
          echo "Artifact filename: $ARTIFACT_FILE"
          echo "Full Artifactory URL: ${ARTIFACTORY_URL}/${{ inputs.artifact_path }}"
          
          curl -f -sS -u "${{ secrets.ARTIFACTORY_USERNAME }}:${{ secrets.ARTIFACTORY_PASSWORD }}" \
            -o "$ARTIFACT_FILE" \
            "${ARTIFACTORY_URL}/${{ inputs.artifact_path }}"
          
          if [ $? -eq 0 ]; then
            echo "✓ Download completed successfully!"
            ls -lh "$ARTIFACT_FILE"
          else
            echo "✗ Download failed!"
            exit 1
          fi
          
          echo "artifact_file=$ARTIFACT_FILE" >> $GITHUB_OUTPUT
      
      - name: Unzip the Artifact
        id: unzip-artifact
        run: |
          echo "=========================================="
          echo "Step 2: Unzip the Artifact"
          echo "=========================================="
          
          ARTIFACT_FILE="${{ steps.download-artifact.outputs.artifact_file }}"
          
          if [[ "$ARTIFACT_FILE" == *.zip ]]; then
            echo "ZIP file detected: $ARTIFACT_FILE"
            
            EXTRACT_DIR="extracted_content"
            mkdir -p "$EXTRACT_DIR"
            
            unzip -o "$ARTIFACT_FILE" -d "$EXTRACT_DIR"
            
            if [ $? -eq 0 ]; then
              echo "✓ Extraction completed successfully!"
              ls -laR "$EXTRACT_DIR"
              
              echo "extracted_path=$(pwd)/$EXTRACT_DIR" >> $GITHUB_OUTPUT
              echo "is_zip=true" >> $GITHUB_OUTPUT
            else
              echo "✗ Extraction failed!"
              exit 1
            fi
          else
            echo "Not a ZIP file - will upload as single file"
            echo "extracted_path=" >> $GITHUB_OUTPUT
            echo "is_zip=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Prepare upload source
        id: prepare-upload
        run: |
          echo "=========================================="
          echo "Step 3: Prepare Upload Source"
          echo "=========================================="
          
          IS_ZIP="${{ steps.unzip-artifact.outputs.is_zip }}"
          ARTIFACT_FILE="${{ steps.download-artifact.outputs.artifact_file }}"
          EXTRACTED_PATH="${{ steps.unzip-artifact.outputs.extracted_path }}"
          
          if [ "$IS_ZIP" == "true" ]; then
            UPLOAD_SOURCE="$EXTRACTED_PATH"
          else
            UPLOAD_SOURCE="$ARTIFACT_FILE"
          fi
          
          echo "upload_source=$UPLOAD_SOURCE" >> $GITHUB_OUTPUT
      
      - name: Determine authentication method
        id: auth-method
        run: |
          echo "=========================================="
          echo "Determining Authentication Method"
          echo "=========================================="
          
          if [ ! -z "${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}" ]; then
            echo "Using: Connection String authentication (RECOMMENDED for File Share)"
            echo "auth_method=connection_string" >> $GITHUB_OUTPUT
          elif [ ! -z "${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}" ] && [ ! -z "${{ secrets.AZURE_STORAGE_ACCOUNT_KEY }}" ]; then
            echo "Using: Account Name + Key authentication"
            echo "auth_method=account_key" >> $GITHUB_OUTPUT
          elif [ ! -z "${{ secrets.AZURE_FILESHARE_SAS_TOKEN_URL }}" ]; then
            echo "Using: SAS Token authentication"
            echo "auth_method=sas_token" >> $GITHUB_OUTPUT
          else
            echo "✗ No valid authentication method found!"
            echo "Please provide one of:"
            echo "  - AZURE_STORAGE_CONNECTION_STRING, or"
            echo "  - AZURE_STORAGE_ACCOUNT_NAME + AZURE_STORAGE_ACCOUNT_KEY, or"
            echo "  - AZURE_FILESHARE_SAS_TOKEN_URL"
            exit 1
          fi
      
      - name: Install Azure CLI
        if: steps.auth-method.outputs.auth_method != 'sas_token'
        run: |
          echo "Installing Azure CLI..."
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          az --version
      
      - name: Upload to Azure File Share using Azure CLI
        if: steps.auth-method.outputs.auth_method != 'sas_token'
        env:
          AZURE_STORAGE_CONNECTION_STRING: ${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}
          AZURE_STORAGE_ACCOUNT: ${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}
          AZURE_STORAGE_KEY: ${{ secrets.AZURE_STORAGE_ACCOUNT_KEY }}
        run: |
          echo "=========================================="
          echo "Step 4: Upload to Azure File Share (Azure CLI)"
          echo "=========================================="
          
          UPLOAD_SOURCE="${{ steps.prepare-upload.outputs.upload_source }}"
          IS_ZIP="${{ steps.unzip-artifact.outputs.is_zip }}"
          FILESHARE_NAME="${{ inputs.azure_fileshare_name }}"
          FILESHARE_PATH="${{ inputs.azure_fileshare_path }}"
          AUTH_METHOD="${{ steps.auth-method.outputs.auth_method }}"
          
          echo "Upload source: $UPLOAD_SOURCE"
          echo "File share name: $FILESHARE_NAME"
          echo "File share path: ${FILESHARE_PATH:-'(root)'}"
          echo "Authentication: $AUTH_METHOD"
          echo ""
          
          # Function to upload file
          upload_file() {
            local file_path="$1"
            local dest_path="$2"
            
            if [ "$AUTH_METHOD" == "connection_string" ]; then
              az storage file upload \
                --source "$file_path" \
                --share-name "$FILESHARE_NAME" \
                --path "$dest_path" \
                --connection-string "$AZURE_STORAGE_CONNECTION_STRING" \
                --no-progress
            else
              az storage file upload \
                --source "$file_path" \
                --share-name "$FILESHARE_NAME" \
                --path "$dest_path" \
                --account-name "$AZURE_STORAGE_ACCOUNT" \
                --account-key "$AZURE_STORAGE_KEY" \
                --no-progress
            fi
          }
          
          # Create directory if specified
          if [ ! -z "$FILESHARE_PATH" ]; then
            echo "Creating directory structure: $FILESHARE_PATH"
            if [ "$AUTH_METHOD" == "connection_string" ]; then
              az storage directory create \
                --share-name "$FILESHARE_NAME" \
                --name "$FILESHARE_PATH" \
                --connection-string "$AZURE_STORAGE_CONNECTION_STRING" || true
            else
              az storage directory create \
                --share-name "$FILESHARE_NAME" \
                --name "$FILESHARE_PATH" \
                --account-name "$AZURE_STORAGE_ACCOUNT" \
                --account-key "$AZURE_STORAGE_KEY" || true
            fi
          fi
          
          # Function to create directory structure
          create_directory() {
            local dir_path="$1"
            
            if [ "$AUTH_METHOD" == "connection_string" ]; then
              az storage directory create \
                --share-name "$FILESHARE_NAME" \
                --name "$dir_path" \
                --connection-string "$AZURE_STORAGE_CONNECTION_STRING" \
                --output none 2>/dev/null || true
            else
              az storage directory create \
                --share-name "$FILESHARE_NAME" \
                --name "$dir_path" \
                --account-name "$AZURE_STORAGE_ACCOUNT" \
                --account-key "$AZURE_STORAGE_KEY" \
                --output none 2>/dev/null || true
            fi
          }
          
          # Upload files
          if [ "$IS_ZIP" == "true" ]; then
            echo "Uploading extracted directory contents..."
            cd "$UPLOAD_SOURCE"
            
            # First, create all directories
            echo "Creating directory structure..."
            find . -type d | while read dir; do
              # Remove leading ./
              dir_clean="${dir#./}"
              
              # Skip current directory
              if [ "$dir_clean" == "." ] || [ -z "$dir_clean" ]; then
                continue
              fi
              
              if [ -z "$FILESHARE_PATH" ]; then
                full_dir_path="$dir_clean"
              else
                full_dir_path="$FILESHARE_PATH/$dir_clean"
              fi
              
              create_directory "$full_dir_path"
            done
            
            # Then upload all files
            echo "Uploading files..."
            find . -type f | while read file; do
              # Remove leading ./
              file_clean="${file#./}"
              
              if [ -z "$FILESHARE_PATH" ]; then
                dest_path="$file_clean"
              else
                dest_path="$FILESHARE_PATH/$file_clean"
              fi
              
              echo "Uploading: $file_clean"
              upload_file "$file" "$dest_path"
            done
            
            echo "✓ All files uploaded successfully!"
          else
            echo "Uploading single file..."
            file_name=$(basename "$UPLOAD_SOURCE")
            
            if [ -z "$FILESHARE_PATH" ]; then
              dest_path="$file_name"
            else
              dest_path="$FILESHARE_PATH/$file_name"
            fi
            
            echo "Uploading: $file_name -> $dest_path"
            upload_file "$UPLOAD_SOURCE" "$dest_path"
            echo "✓ File uploaded successfully!"
          fi
      
      - name: Install azcopy for SAS token upload
        if: steps.auth-method.outputs.auth_method == 'sas_token'
        run: |
          echo "Installing azcopy..."
          wget -q https://aka.ms/downloadazcopy-v10-linux -O azcopy.tar.gz
          tar -xzf azcopy.tar.gz --strip-components=1
          sudo mv azcopy /usr/local/bin/
          sudo chmod +x /usr/local/bin/azcopy
          azcopy --version
      
      - name: Upload to Azure File Share using SAS Token
        if: steps.auth-method.outputs.auth_method == 'sas_token'
        run: |
          echo "=========================================="
          echo "Step 4: Upload to Azure File Share (SAS Token)"
          echo "=========================================="
          
          UPLOAD_SOURCE="${{ steps.prepare-upload.outputs.upload_source }}"
          IS_ZIP="${{ steps.unzip-artifact.outputs.is_zip }}"
          FILESHARE_PATH="${{ inputs.azure_fileshare_path }}"
          OVERWRITE="${{ inputs.overwrite }}"
          
          echo "Upload source: $UPLOAD_SOURCE"
          echo "File share path: ${FILESHARE_PATH:-'(root)'}"
          echo "Overwrite existing: $OVERWRITE"
          echo "Authentication: SAS Token"
          echo ""
          
          BASE_URL="${{ secrets.AZURE_FILESHARE_SAS_TOKEN_URL }}"
          
          if [ -z "$FILESHARE_PATH" ]; then
            DEST_URL="$BASE_URL"
          else
            URL_WITHOUT_QUERY="${BASE_URL%%\?*}"
            QUERY_STRING="${BASE_URL#*\?}"
            DEST_URL="${URL_WITHOUT_QUERY}/${FILESHARE_PATH}?${QUERY_STRING}"
          fi
          
          if [ "$IS_ZIP" == "true" ]; then
            echo "Uploading directory contents recursively..."
            azcopy cp "$UPLOAD_SOURCE/*" "$DEST_URL" \
              --recursive=true \
              --overwrite=$OVERWRITE
          else
            echo "Uploading single file..."
            azcopy cp "$UPLOAD_SOURCE" "$DEST_URL/" \
              --overwrite=$OVERWRITE
          fi
          
          if [ $? -eq 0 ]; then
            echo "✓ Upload completed successfully!"
          else
            echo "✗ Upload failed!"
            exit 1
          fi
      
      - name: Verify upload
        env:
          AZURE_STORAGE_CONNECTION_STRING: ${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}
          AZURE_STORAGE_ACCOUNT: ${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}
          AZURE_STORAGE_KEY: ${{ secrets.AZURE_STORAGE_ACCOUNT_KEY }}
        run: |
          echo "=========================================="
          echo "Verification: List File Share Contents"
          echo "=========================================="
          
          FILESHARE_NAME="${{ inputs.azure_fileshare_name }}"
          FILESHARE_PATH="${{ inputs.azure_fileshare_path }}"
          AUTH_METHOD="${{ steps.auth-method.outputs.auth_method }}"
          
          if [ "$AUTH_METHOD" == "connection_string" ]; then
            if [ -z "$FILESHARE_PATH" ]; then
              az storage file list \
                --share-name "$FILESHARE_NAME" \
                --connection-string "$AZURE_STORAGE_CONNECTION_STRING" \
                --output table
            else
              az storage file list \
                --share-name "$FILESHARE_NAME" \
                --path "$FILESHARE_PATH" \
                --connection-string "$AZURE_STORAGE_CONNECTION_STRING" \
                --output table
            fi
          elif [ "$AUTH_METHOD" == "account_key" ]; then
            if [ -z "$FILESHARE_PATH" ]; then
              az storage file list \
                --share-name "$FILESHARE_NAME" \
                --account-name "$AZURE_STORAGE_ACCOUNT" \
                --account-key "$AZURE_STORAGE_KEY" \
                --output table
            else
              az storage file list \
                --share-name "$FILESHARE_NAME" \
                --path "$FILESHARE_PATH" \
                --account-name "$AZURE_STORAGE_ACCOUNT" \
                --account-key "$AZURE_STORAGE_KEY" \
                --output table
            fi
          else
            echo "Verification skipped for SAS token authentication"
          fi
