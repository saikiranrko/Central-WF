name: Add Protection and Deploy

on:
  workflow_dispatch:
    inputs:
      repo_name:
        description: 'Repository name (e.g., owner/repo)'
        required: true
      pattern:
        description: 'Branch or tag pattern to protect (e.g., v* or main)'
        required: true
      type:
        description: 'Type of protection (branch or tag)'
        required: true
        type: choice
        options:
          - branch
          - tag
      environment:
        description: 'Environment name for deployment'
        required: true

jobs:
  add_protection:
    runs-on: ubuntu-latest

    steps:
      - name: Set up job
        id: setup
        run: echo "Starting protection configuration"

      - name: Install jq
        run: sudo apt-get install jq -y

      - name: Add protection
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        run: |
          set -e  # Exit immediately if any command fails

          # Input variables
          REPO_NAME="${{ github.event.inputs.repo_name }}"
          PATTERN="${{ github.event.inputs.pattern }}"
          TYPE="${{ github.event.inputs.type }}"
          ENVIRONMENT="${{ github.event.inputs.environment }}"

          # URL encode the environment name and pattern
          ENCODED_ENV=$(echo "$ENVIRONMENT" | jq -sRr @uri)
          ENCODED_PATTERN=$(echo "$PATTERN" | jq -sRr @uri)

          # GitHub API URL with encoded environment name
          API_URL="https://api.github.com/repos/${REPO_NAME}/environments/${ENCODED_ENV}/deployment-branch-policies"

          echo "üîç Inputs: Repository=${REPO_NAME}, Pattern=${PATTERN}, Type=${TYPE}, Environment=${ENVIRONMENT}"

          # Function to handle errors
          handle_error() {
            local status=$1
            local response=$2
            local operation=$3
            
            echo "‚ùå Error during ${operation}. HTTP Status: ${status}"
            echo "Response body: ${response}"
            
            # Parse error message if possible
            local error_msg=$(echo "${response}" | jq -r '.message // "Unknown error"')
            echo "Error message: ${error_msg}"
            
            case $status in
              401) echo "Authentication failed. Please check your PAT token." ;;
              403) echo "Permission denied. Ensure your PAT token has the required permissions." ;;
              404) echo "Resource not found. Check if the repository and environment exist." ;;
              422) echo "Validation failed. Check your input parameters." ;;
              *) echo "Unexpected error occurred." ;;
            esac
            
            exit 1
          }

          # Fetch existing policies
          echo "Fetching existing deployment branch/tag policies..."
          EXISTING_RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "$API_URL")
          
          EXISTING_BODY=$(echo "$EXISTING_RESPONSE" | sed -e 's/HTTPSTATUS\:.*//g')
          EXISTING_STATUS=$(echo "$EXISTING_RESPONSE" | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')

          if [ $EXISTING_STATUS -ne 200 ]; then
            handle_error "$EXISTING_STATUS" "$EXISTING_BODY" "fetching existing policies"
          fi

          if [ "$TYPE" = "branch" ]; then
            echo "Checking if branch pattern '${PATTERN}' already exists..."
            BRANCH_EXISTS=$(echo "$EXISTING_BODY" | jq -r --arg pattern "$PATTERN" \
              '.branch_policies[]? | select(.name == $pattern) | .name')
            
            if [ "$BRANCH_EXISTS" = "$PATTERN" ]; then
              echo "‚ö†Ô∏è Branch pattern '${PATTERN}' already exists in environment '${ENVIRONMENT}'. No action needed."
              exit 0
            fi

            echo "üöÄ Adding branch protection for pattern: $PATTERN"
            RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" \
              -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "$API_URL" \
              -d "{\"name\": \"${PATTERN}\"}")

          elif [ "$TYPE" = "tag" ]; then
            echo "Checking if tag pattern '${PATTERN}' already exists..."
            TAG_EXISTS=$(echo "$EXISTING_BODY" | jq -r --arg pattern "$PATTERN" \
              '.tag_policies[]? | select(.name == $pattern) | .name')
            
            if [ "$TAG_EXISTS" = "$PATTERN" ]; then
              echo "‚ö†Ô∏è Tag pattern '${PATTERN}' already exists in environment '${ENVIRONMENT}'. No action needed."
              exit 0
            fi

            echo "üöÄ Adding tag protection for pattern: $PATTERN"
            RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" \
              -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "$API_URL" \
              -d "{\"name\": \"${PATTERN}\", \"type\": \"tag\"}")
          else
            echo "‚ùå Invalid type specified: $TYPE. Use 'branch' or 'tag'."
            exit 1
          fi

          BODY=$(echo "$RESPONSE" | sed -e 's/HTTPSTATUS\:.*//g')
          STATUS=$(echo "$RESPONSE" | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')

          if [ $STATUS -eq 200 ]; then
            echo "‚úÖ Successfully added ${TYPE} protection for pattern: $PATTERN"
          else
            handle_error "$STATUS" "$BODY" "adding ${TYPE} protection"
          fi

      - name: Confirmation
        run: echo "üéâ Protection has been successfully configured for the repository."
