name: Add Protection and Deploy

on:
  workflow_dispatch:
    inputs:
      repo_name:
        description: 'Repository name (e.g., owner/repo)'
        required: true
      pattern:
        description: 'Branch or tag pattern to protect (e.g., v* or main)'
        required: true
      type:
        description: 'Type of protection (branch or tag)'
        required: true
        type: choice
        options:
          - branch
          - tag
      environment:
        description: 'Environment name for deployment'
        required: true

jobs:
  add_protection:
    runs-on: ubuntu-latest

    steps:
      - name: Set up job
        id: setup
        run: echo "Starting protection configuration"

      - name: Install jq
        run: sudo apt-get install jq -y

      - name: Add protection
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        run: |
          set -e  # Exit immediately if any command fails

          # Input variables
          REPO_NAME="${{ github.event.inputs.repo_name }}"
          PATTERN="${{ github.event.inputs.pattern }}"
          TYPE="${{ github.event.inputs.type }}"
          ENVIRONMENT="${{ github.event.inputs.environment }}"

          # GitHub API URL
          API_URL="https://api.github.com/repos/${REPO_NAME}/environments/${ENVIRONMENT}/deployment-branch-policies"

          echo "üîç Inputs: Repository=${REPO_NAME}, Pattern=${PATTERN}, Type=${TYPE}, Environment=${ENVIRONMENT}"

          # Fetch existing policies
          echo "Fetching existing deployment branch/tag policies..."
          EXISTING_PATTERNS=$(curl -s \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            $API_URL)

          if [ "$TYPE" = "branch" ]; then
            echo "Checking if branch pattern '${PATTERN}' already exists..."
            BRANCH_EXISTS=$(echo "$EXISTING_PATTERNS" | jq -e --arg pattern "$PATTERN" \
              '.branch_policies[]? | select(.name == $pattern) | .name' || echo "")
            if [ -n "$BRANCH_EXISTS" ]; then
              echo "‚ö†Ô∏è Branch pattern '${PATTERN}' already exists in environment '${ENVIRONMENT}'. No action needed."
              exit 0
            fi
            echo "üöÄ Adding branch protection for pattern: $PATTERN"
            RESPONSE=$(curl -s -w "%{http_code}" -o response.json \
              -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              $API_URL \
              -d "{
                    \"name\": \"${PATTERN}\"
                  }")
            if [ "$RESPONSE" -eq 201 ]; then
              echo "‚úÖ Successfully added branch protection for pattern: $PATTERN"
            else
              echo "‚ùå Failed to add branch protection. HTTP Status: $RESPONSE"
              echo "Response body: $(cat response.json)"
              exit 1
            fi

          elif [ "$TYPE" = "tag" ]; then
            echo "Checking if tag pattern '${PATTERN}' already exists..."
            TAG_EXISTS=$(echo "$EXISTING_PATTERNS" | jq -e --arg pattern "$PATTERN" \
              '.tag_policies[]? | select(.name == $pattern) | .name' || echo "")
            if [ -n "$TAG_EXISTS" ]; then
              echo "‚ö†Ô∏è Tag pattern '${PATTERN}' already exists in environment '${ENVIRONMENT}'. No action needed."
              exit 0
            fi
            echo "üöÄ Adding tag protection for pattern: $PATTERN"
            RESPONSE=$(curl -s -w "%{http_code}" -o response.json \
              -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              $API_URL \
              -d "{
                    \"name\": \"${PATTERN}\",
                    \"type\": \"tag\"
                  }")
            if [ "$RESPONSE" -eq 201 ]; then
              echo "‚úÖ Successfully added tag protection for pattern: $PATTERN"
            else
              echo "‚ùå Failed to add tag protection. HTTP Status: $RESPONSE"
              echo "Response body: $(cat response.json)"
              exit 1
            fi
          else
            echo "‚ùå Invalid type specified: $TYPE. Use 'branch' or 'tag'."
            exit 1
          fi

      - name: Confirmation
        run: echo "üéâ Protection has been successfully configured for the repository."
