name: Add Deployment Tag Rule

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "The target environment (e.g., production, staging)"
        required: true
      repository:
        description: "The repository (owner/repo format)"
        required: true
      tag:
        description: "The tag to be added as a rule"
        required: true

jobs:
  add-tag-rule:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository (if needed)
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Update the environment deployment rule
      - name: Add Tag Rule to Environment
        env:
          PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          # Assign variables from input
          ENVIRONMENT="${{ github.event.inputs.environment }}"
          REPOSITORY="${{ github.event.inputs.repository }}"
          TAG="${{ github.event.inputs.tag }}"
          TOKEN="${{ secrets.PERSONAL_ACCESS_TOKEN }}"

          # Extract owner and repo from REPOSITORY
          OWNER=$(echo $REPOSITORY | cut -d'/' -f1)
          REPO=$(echo $REPOSITORY | cut -d'/' -f2)

          # Step 2.1: Get the current environment settings
          ENV_URL="https://api.github.com/repos/$OWNER/$REPO/environments/$ENVIRONMENT"
          ENV_RESPONSE=$(curl -s -H "Authorization: Bearer $TOKEN" \
                                  -H "Accept: application/vnd.github+json" \
                                  $ENV_URL)
          if [ -z "$ENV_RESPONSE" ] || [[ $ENV_RESPONSE == *"Not Found"* ]]; then
            echo "Error: Environment $ENVIRONMENT not found in $REPOSITORY."
            exit 1
          fi

          # Step 2.2: Parse the protection rules JSON
          PROTECTION_RULES=$(echo $ENV_RESPONSE | jq '.protection_rules')
          if [ -z "$PROTECTION_RULES" ]; then
            echo "Warning: No existing protection rules found. Initializing..."
            PROTECTION_RULES="[]"
          fi

          # Step 2.3: Add the new tag rule
          UPDATED_RULES=$(echo $PROTECTION_RULES | jq --arg TAG "$TAG" '. + [{"type": "tag", "pattern": $TAG}]')

          # Step 2.4: Update the environment settings
          UPDATE_RESPONSE=$(curl -s -X PATCH \
            -H "Authorization: Bearer $TOKEN" \
            -H "Accept: application/vnd.github+json" \
            -H "Content-Type: application/json" \
            -d "{\"protection_rules\": $UPDATED_RULES}" \
            $ENV_URL)

          # Step 2.5: Confirm the update was successful
          if [[ $UPDATE_RESPONSE == *"protection_rules"* ]]; then
            echo "Successfully added the tag rule to environment $ENVIRONMENT in $REPOSITORY."
          else
            echo "Failed to update environment. Response: $UPDATE_RESPONSE"
            exit 1
          fi
