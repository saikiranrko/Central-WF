name: Add Tag Deployment Rule
on:
  workflow_dispatch:
    inputs:
      repository:
        description: "Repository name (e.g., owner/repo)"
        required: true
      environment_name:
        description: "Environment name"
        required: true
        default: "production"
      tag_pattern:
        description: "Tag pattern (e.g., v*)"
        required: true
        default: "v*"

jobs:
  configure-environment:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment_name }}
    
    steps:
      - name: Configure environment deployment rules
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            const [owner, repo] = '${{ github.event.inputs.repository }}'.split('/');
            const environment = '${{ github.event.inputs.environment_name }}';
            const tagPattern = '${{ github.event.inputs.tag_pattern }}';
            
            console.log(`Configuring environment ${environment} for ${owner}/${repo}`);
            
            // First, create or update the environment with deployment protection
            await github.rest.repos.createOrUpdateEnvironment({
              owner: owner,
              repo: repo,
              environment_name: environment,
              deployment_branch_policy: {
                protected_branches: false,
                custom_branch_policies: true
              }
            });
            
            console.log('Environment configured successfully');
            
            // Create deployment protection rule for tags using GraphQL
            const query = `
              mutation($repositoryId: ID!, $environmentName: String!, $pattern: String!) {
                createDeploymentProtectionRule(input: {
                  repositoryId: $repositoryId,
                  environmentName: $environmentName,
                  pattern: $pattern
                }) {
                  deploymentProtectionRule {
                    id
                    pattern
                  }
                }
              }
            `;
            
            // Get repository ID
            const repoData = await github.rest.repos.get({
              owner: owner,
              repo: repo
            });
            
            const variables = {
              repositoryId: repoData.data.node_id,
              environmentName: environment,
              pattern: tagPattern
            };
            
            // Create the deployment protection rule
            await github.graphql(query, variables);
            
            console.log(`Tag deployment rule added for pattern: ${tagPattern}`);
