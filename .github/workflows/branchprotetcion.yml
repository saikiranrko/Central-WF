name: Add Branch Protection for Pattern
on:
  workflow_dispatch:
    inputs:
      repo:
        description: "Repository name (owner/repo)"
        required: true
      branch_pattern:
        description: "Branch pattern to apply protection (e.g., release/*)"
        required: true
jobs:
  set-branch-protection:
    runs-on: ubuntu-latest
    steps:
      - name: Apply Branch Protection for Pattern
        env:
          AUTH_TOKEN: ${{ secrets.PAT_TOKEN }}
          GITHUB_DEBUG: true
        run: |
          # Parse inputs
          owner=$(echo "${{ github.event.inputs.repo }}" | cut -d'/' -f1)
          repo=$(echo "${{ github.event.inputs.repo }}" | cut -d'/' -f2)
          branch_pattern="${{ github.event.inputs.branch_pattern }}"
          
          # Debug information
          echo "Owner: $owner"
          echo "Repository: $repo"
          echo "Branch Pattern: $branch_pattern"
          
          # Test API access
          echo "Testing API access..."
          api_test=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: Bearer $AUTH_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/user")
          
          if [ "$api_test" != "200" ]; then
            echo "Error: GitHub API access failed. Status code: $api_test"
            echo "Please check if the PAT_TOKEN has correct permissions:"
            echo "- repo (Full control of private repositories)"
            echo "- workflow (Update GitHub Action workflows)"
            exit 1
          fi
          
          # Fetch repository ID with error handling
          echo "Fetching repository ID for $owner/$repo..."
          repo_response=$(curl -s \
            -H "Authorization: Bearer $AUTH_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/$owner/$repo")
          
          repo_id=$(echo "$repo_response" | jq -r .node_id)
          echo "Repository ID: $repo_id"
          
          if [ -z "$repo_id" ] || [ "$repo_id" = "null" ]; then
            echo "Error: Failed to fetch repository ID."
            echo "API Response:"
            echo "$repo_response" | jq '.'
            echo "Please check:"
            echo "1. Repository name is correct"
            echo "2. PAT_TOKEN has access to the repository"
            echo "3. Repository exists"
            exit 1
          fi
          
          # Create GraphQL mutation
          QUERY='mutation($repositoryId: ID!, $pattern: String!) {
            createBranchProtectionRule(input: {
              repositoryId: $repositoryId,
              pattern: $pattern,
              requiresApprovingReviews: true,
              requiredApprovingReviewCount: 2,
              dismissesStaleReviews: true,
              requiresCodeOwnerReviews: true,
              isAdminEnforced: true,
              allowsForcePushes: false,
              allowsDeletions: false
            }) {
              branchProtectionRule {
                id
                pattern
              }
            }
          }'
          
          # Create request body
          json_body=$(jq -n \
            --arg query "$QUERY" \
            --arg repo_id "$repo_id" \
            --arg pattern "$branch_pattern" \
            '{
              query: $query,
              variables: {
                repositoryId: $repo_id,
                pattern: $pattern
              }
            }')
          
          # Debug request body
          echo "GraphQL Request Body:"
          echo "$json_body" | jq '.'
          
          # Execute GraphQL mutation with error handling
          echo "Applying branch protection rules for pattern '$branch_pattern'..."
          graphql_response=$(curl -v -X POST \
            -H "Authorization: Bearer $AUTH_TOKEN" \
            -H "Content-Type: application/json" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/graphql \
            -d "$json_body" 2>&1)
          
          # Print full response for debugging
          echo "Full GraphQL Response:"
          echo "$graphql_response"
          
          # Check for errors in a more robust way
          if echo "$graphql_response" | grep -q "errors"; then
            echo "Error: GraphQL mutation failed:"
            echo "$graphql_response" | jq '.errors[]?.message' 2>/dev/null
            exit 1
          elif ! echo "$graphql_response" | grep -q "branchProtectionRule"; then
            echo "Error: Unexpected response format:"
            echo "$graphql_response"
            exit 1
          else
            echo "Success! Branch protection rules applied for branch pattern '$branch_pattern' in repo $owner/$repo."
            echo "Response:"
            echo "$graphql_response" | jq '.' 2>/dev/null || echo "$graphql_response"
          fi
